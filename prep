#!/bin/bash
#This script prepares the filesystem and is intended to be used
#with an Arch Installation. At the beginning of the script are
#the options that need to be set or checked.
#The filesystem format is: GPT with one big partition for LVM

#Partition that uses remaining space on disk has to be last in installX arrays
#Nested partitions should come after partitions that they are nested in

#To use this script, when the root has appeared from 
#the Arch boot cd, execute the following lines:
#    loadkeys be-latin1 #Or whatever you need
#    pacman -Sy
#    pacman -S git
#    git clone https://www.github.com/beukueb/aui
#    $editor aui/prep #To customize options in the script
#    aui/prep #To execute

#Settings
editor=vi
installDev=/dev/sda
installPartitions=(root swap home)
installMounts=(/mnt swap /mnt/home) #Need to be same size as
installSizes=(5G 1G REMAINING) #installPartitions
installDevs=() #If no partitioning needs to be done, put corresponding
               #devices here, e.g. (/dev/sda1 /dev/sda2 /dev/sda3)
keymap=be-latin1
consoleFont=lat9w-16
mirrorCountry=Belgium
localeSetting=nl_BE
defaultLocale=nl_BE.UTF-8
timezone=Europe/Brussels
myhostname=ArchAUI

#Check if device is without partitions
if [ "$(lsblk $installDev | wc -l)" -gt 2  ]; then 
   echo "prep expects a device without partitions";
   echo "This ensures that you know what you are doing!"
   if [[ "${installDevs[@]}" != "" ]]; then
       echo "You used installDevs so at least you somewhat know what you are doing"
       read -p "Continue? C^C to exit now, enter to continue!" testContinue
   else
       exit 1
   fi
fi

#Make partition scheme
##Checks
###Check if partition info arrays have same length
if [[ "${#installPartitions[@]}" != "${#installMounts[@]}" || "${#installPartitions[@]}" != "${#installSizes[@]}" ]]; then
    echo "Check your installX settings"
    exit 1
elif [[ "${installDevs[@]}" != "" &&  "${#installPartitions[@]}" != "${#installDevs[@]}" ]]; then
    echo "installDevs is not empty, but does not match size of ofther installX"
    exit 1
fi

##Convert an MBR or BSD disklabel disk to GPT format
sgdisk -o $installDev
sgdisk -n 1:$(sgdisk -F $installDev):$(sgdisk -E $installDev) -t1:8e00 -c 1:"Linux LVM" $installDev
sgdisk -n 2:34:$(sgdisk -E $installDev) -t2:ef02 -c 2:"BIOS Boot Partition" $installDev

##Create LVM
pvcreate ${installDev}1
vgcreate VolGroup00 ${installDev}1

##Create partitions
for (( i=0; i<${#installPartitions[@]}; i++ )); do
    if [ "${installSizes[$i]}" != "REMAINING" ]; then
	isize="-L ${installSizes[$i]}" #=>lvcreate -L 5G VolGroup00 -n root
    else
	isize="-l +100%FREE" #=>lvcreate -l +100%FREE VolGroup00 -n home
    fi
    lvcreate $isize VolGroup00 -n ${installPartitions[$i]}
    if [ "${installPartitions[$i]}" != "swap" ]; then
	#Create file system
	mkfs.ext4 /dev/VolGroup00/${installPartitions[$i]}
	#Mount file system
	mkdir -p ${installMounts[$i]}
	mount /dev/VolGroup00/${installPartitions[$i]} ${installMounts[$i]}
    else
	mkswap /dev/VolGroup00/${installPartitions[$i]}
	swapon /dev/VolGroup00/${installPartitions[$i]}
    fi
done

#Check if internet connection
#TODO
#if not suggest wifi-menu, ...

#Mirrorlist
grep -A1 $mirrorCountry /etc/pacman.d/mirrorlist | grep -v "^--$" > /tmp/country
head -n6 /etc/pacman.d/mirrorlist > /tmp/head
tail -n +6 /etc/pacman.d/mirrorlist > /tmp/tail
cat /tmp/head /tmp/country /tmp/tail > /etc/pacman.d/mirrorlist
rm /tmp/head /tmp/country /tmp/tail

#Install base system
pacstrap /mnt base base-devel

#fstab
genfstab -U -p /mnt >> /mnt/etc/fstab
#TODO for interactive use => $editor /mnt/etc/fstab

#General chroot setup
RUN="arch-chroot /mnt"
$RUN /bin/bash <<EOF
  sed -i "s/^#${localeSetting}/${localeSetting}/" /etc/locale.gen
  locale-gen
  echo LANG=${defaultLocale} > /etc/locale.conf
  export LANG=${defaultLocale}
  echo -e "KEYMAP=${keymap}\nFONT=${consoleFont}" > /etc/vconsole.conf
  ln -s /usr/share/zoneinfo/$timezone /etc/localtime
  hwclock --systohc --utc
  echo $myhostname > /etc/hostname
  echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf #Disable PC speaker
  sed -i 's/^HOOKS="[a-z0-9 ]*block /&lvm2 / ' /etc/mkinitcpio.conf
  mkinitcpio -p linux
EOF

#Network setup
#TODO wireless
echo "Setting up network"
echo "Choose which wired interfaces to activate with dhcp"
 
for ipdev in $($RUN ls /sys/class/net/); do
    if [[ "$ipdev" == en* ]]; then 
	echo "Activate interface $ipdev with dhcp? [y/N] "
	read activdev
	if [ "$activdev" == "y" ]; then
	    $RUN systemctl enable dhcpcd@${ipdev}.service 
	fi
    elif [[ "$ipdev" == wl* ]]; then
	$RUN pacman --noconfirm -S iw wpa_supplicant dialog
	echo "After rebooting you can connect with wireless using: 'wifi-menu'"
    fi
done


#Set root password
echo "Set root password"
$RUN passwd

#Set sudoers
$RUN sed -i 's/^## Cmnd alias specification$/## Cmnd alias specification\nCmnd_Alias SHUTDOWN=\/sbin\/shutdown -P now/' /etc/sudoers
$RUN sed -i 's/^# %wheel ALL=(ALL) ALL$/%wheel ALL=(ALL) ALL\n%wheel ALL=NOPASSWD: SHUTDOWN/' /etc/sudoers

#Bootmanager
arch-chroot /mnt /bin/bash <<EOF
  pacman --noconfirm -S grub
  grub-install --target=i386-pc --recheck ${installDev}
  pacman --noconfirm -S os-prober
  grub-mkconfig -o /boot/grub/grub.cfg
EOF

#Copy the aui folder to /mnt/root for use after reboot
mkdir /mnt/root/aui
cp /root/aui/* /mnt/root/aui/ 

#End
umount -R /mnt
echo "If everything went well after rebooting your new system should be ready."
echo "You can then continue with the aui follow-up scripts"
