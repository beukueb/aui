#!/bin/bash

#This script groups packages in logical units for system setup,
#and creates a default sudo user

#All available functions for the user should end with "(){"
availableFunctions=$(grep "(){$" ${BASH_SOURCE[0]} | sed 's/(){//')

#Help
if [ "$1" == "-h" ]; then
  echo "Usage:"
  echo "${BASH_SOURCE[0]} all #=> will do full setup"
  echo "-OR-"
  echo -e "${BASH_SOURCE[0]} module [module ...] #=> choose modules\n"
  echo "'module' can be any of the following:"
  echo "$availableFunctions"
  exit
fi

#Settings
wdir=$(pwd)
read -p "Username: " userName
read -p "X11 keyboard config [e.g. 'be,ru pc104 ,phonetic grp:alt_caps_toggle'] " xkbdconfig
if [ "$1" == "all" ]; then read -p "Include AUR packages? [y/N] " aur; fi

#X11 keyboard config info
#localectl set-x11-keymap be,ru pc104 ,phonetic grp:alt_caps_toggle
    #other toggle possibilities => grep "grp:.*_toggle" #/usr/share/X11/xkb/rules/base.lst
    #if other model needed than default pc104 => localectl #list-x11-keymap-models
    #if other variant needed for a layout => localectl #list-x11-keymap-variants [layout]

##User execution
USERUN="sudo -u $userName"

##Check if user exists
if ! id -u $userName >/dev/null 2>&1; then 
  useradd -m -G wheel $userName
  passwd $userName
  read -p "Get config .dotfiles from git? [y/N]" fromGit
  if [ "$fromGit" == "y" ]; then
    read -p "Gir repository [e.g. beukueb/dotfiles]: " fromGit
    pacman --noconfirm -S git
    cd /home/$userName
    $USERUN mkdir github
    cd github
    $USERUN git clone https://www.github.com/$fromGit
    $USERUN cp */.* /home/$userName/
    cd $wdir
  fi
fi

#Package functions
pacheck(){ #Checks and installs a packages array with pacman
#It works equally well with 1 package or an array of packages
  for prog in "$@"; do
    if ! pacman --noconfirm -S $prog; then
      echo "$prog was not installed succesfully" >> ${wdir}/autoSetup.log
    fi
  done
}

systemUtilities(){
  programs=(gpm #driver for mouse in console
      bash-completion htop p7zip unrar git wget openssh
      ttf-dejavu gvfs gvfs-smb ntfs-3g
      lynx #terminal browser
      )
  pacheck ${programs[@]}
}

graphicalEnvironment(){
  programs=(xorg-server xorg-utils xorg-xinit xorg-xrandr
      fluxbox numlockx xcompmgr volwheel
      conky gnome-screensaver scrot
      emacs terminator chromium
      thunar thunar-archive-plugin thunar-volman file-roller
      tumbler ffmpegthumbnailer #for thunar thumbnails
      gnome-icon-theme gcalctool
      )
  pacheck ${programs[@]}

  #X11 keyboard config
  localectl set-x11-keymap $xkbdconfig

  #Recopy fluxbox config if exists
  if [ -d /home/${userName}/github/dotfiles/.fluxbox ]; then
    rm -rf /home/${userName}/.fluxbox
    $USERUN cp -R /home/${userName}/github/dotfiles/.fluxbox /home/${userName}/
  fi

  #Graphics card setup
  graphicsCard
}

printingTools(){ #arch-wiki CUPS
  programs=(cups cups-filters ghostscript gsfonts avahi
      ##Drivers
      hplip sane #For GUI => python2-qt pygobject
      cups-pdf #Print to pdf
      )
  pacheck ${programs[@]}

  ##Startup
  systemctl enable avahi-daemon.service
  systemctl enable cups.service
  echo "To configure printing go to http://localhost:631"
}

pythonTools(){
  programs=(ipython pyqt python-pygments
      python-pyzmq python-tornado
      python-matplotlib tk
      python-pandas python-scipy
      python-numexpr python-openpyxl1
      cython
      )
  pacheck ${programs[@]}
}

scienceTools(){
  programs=(r tcl tk gcc-fortran)
  pacheck ${programs[@]}
  R <<EOF
    #Bioconductor packages
    source("http://bioconductor.org/biocLite.R")
    biocLite("edgeR")
    biocLite("preprocessCore")
    #CRAN packages
    install.packages("PoissonSeq")
EOF
}

officeTools(){
  programs=(sshfs vpnc rdesktop
      gedit evince eog gimp inkscape
      libreoffice libreoffice-langpack libreoffice-nl
      kdegraphics-okular #For pdf annotations
      calibre
      )
  pacheck ${programs[@]}
}

desktopPrograms(){
  programs=(texlive-most latex2rtf auctex
      keepass
      )
  pacheck ${programs[@]}
}

mediaPrograms(){
  programs=(alsa-utils alsa-plugins pulseaudio
      icedtead-web-java7 flashplugin
      cdrtools # cdrkit is not usable for dvd/BD
      )
  pacheck ${programs[@]}
}

webserver(){
  programs=(apache php php-apache mariadb
      python-django
      poedit
      )
  pacheck ${programs[@]}
}

virtualboxInstall(){
  programs=(linux-headers linux-lts-headers
      virtualbox virtualbox-host-dkms virtualbox-host-modules
      haskell-pandoc
      )
  pacheck ${programs[@]}
}

aurSetup(){
  if ! command -v wget >/dev/null 2>&1; then systemUtilities; fi #dependency
  pacman --noconfirm -S namcap #program to check PKGBUILD files (security)
  cd /tmp
  $USERUN wget https://aur.archlinux.org/packages/pa/package-query/package-query.tar.gz
  $USERUN tar xzf package-query.tar.gz
  cd package-query
  $USERUN makepkg
  pacman --noconfirm -U *.pkg.tar.xz
  cd ..
  $USERUN wget https://aur.archlinux.org/packages/ya/yaourt/yaourt.tar.gz
  $USERUN tar yaourt.tar.gz
  cd yaourt
  $USERUN makepkg
  pacman --noconfirm -U *.pkg.tar.xz
  cd ..
  rm -rf package-query* yaourt*
  cd wdir
}

aurPackages(){
  if [ "$aur" != "y" ]; then return; fi
  echo "AUR packages should be carefully inspected for each package installed"
  echo "This section therefore is not automatic and"
  echo "requires your authorization on each step."
  $USERUN yaourt -Sa dropbox
  $USERUN yaourt -Sa chromium-pepper-flash
  $USERUN yaourt -Sa ttf-ms-fonts
  $USERUN yaourt -Sa ttf-google-fonts-git
  $USERUN yaourt -Sa otf-source-sans-pro
  $USERUN yaourt -Sa pymysql
  $USERUN yaourt -Sa python-rpy2
  $USERUN yaourt -Sa jabref
  $USERUN yaourt -Sa ctemplate mysql-connector-c%2B%2B vsqlite%2B%2B mysql-workbench
}

#Advanced setup functions
graphicsCard(){ #called by graphicalEnvironment
  cardIdentity=$(lspci | grep VGA)
  if grep -iq NVIDIA <<<$cardIdentity; then
    pacheck xf86-video-nouveau
  elif grep -iq INTEL <<<$cardIdentity; then
    pacheck xf86-video-intel
  elif grep -iq AMD <<<$cardIdentity; then
    pacheck xf86-video-ati
  elif grep -iq VIRTUALBOX <<<$cardIdentity; then
    pacheck virtualbox-guest-utils
  fi
  pacheck xf86-input-synaptics
  pacheck xorg-xbacklight
    #Brighten up screen => xbacklight -inc 40
    #Dim down => xbacklight -dec 40
}

firewall(){ #TODO
  ##Add rules file:
  cat > /etc/iptables/iptables.rules <<EOF
# Based on https://wiki.archlinux.org/index.php/simple_stateful_firewall
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:TCP - [0:0]
:UDP - [0:0]
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m conntrack --ctstate INVALID -j DROP
-A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable
# Uncomment following line for standard ssh access
#-A TCP -p tcp --dport 22 -j ACCEPT
# Uncomment following line for http web server
#iptables -A TCP -p tcp --dport 80 -j ACCEPT
# Uncomment following line for https web server
#iptables -A TCP -p tcp --dport 443 -j ACCEPT
COMMIT
EOF
  #Check that the rules load correctly
  systemctl start iptables.service && systemctl status iptables.service
  #Enable for activating rules on startup
  systemctl enable iptables.service
}

timesetup(){ #TODO
  pacheck ntp
  emacs /etc/ntp.conf
    #.pool => .europe.pool
  ntpd -qg
  hwclock -w
}

advancedSystemSetup(){
  ##Forwarding system messages to tty12 (^C-M-F12)
  sed -i "s/^#ForwardToConsole=no/ForwardToConsole=yes/" /etc/systemd/journald.conf
  sed -i "s/^#TTYPath=\/dev\/console/TTYPath=\/dev\/tty12/" /etc/systemd/journald.conf
  sed -i "s/^#MaxLevelConsole=info/MaxLevelConsole=info/" /etc/systemd/journald.conf
  systemctl restart systemd-journald

  ##Create systemd rc.local
  cat > /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local Compatibility
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF

  cat > /etc/rc.local <<EOF
#!/bin/bash
#Put commands here

exit 0
EOF
  chmod +x /etc/rc.local
  systemctl enable rc-local.service
}

#Execute requested functions
if [ "$1" == "all" ]; then
  for var in $availableFunctions; do $var; done
else
  for var in "$@"; do
    if grep -Eq "( |^)${var}( |$)" <<<$availableFunctions; then
      $var
    else
      echo "$var not available. Typo?"
    fi
  done
fi
